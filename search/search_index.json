{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"reportly \u00b6 An Open Source Python Report Engine for Data Visualization with HTML Free software: MIT Documentation: https://reportly.readthedocs.io Features \u00b6 TODO Credits \u00b6 This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"home"},{"location":"#reportly","text":"An Open Source Python Report Engine for Data Visualization with HTML Free software: MIT Documentation: https://reportly.readthedocs.io","title":"reportly"},{"location":"#features","text":"TODO","title":"Features"},{"location":"#credits","text":"This package was created with Cookiecutter and the zillionare/cookiecutter-pypackage project template.","title":"Credits"},{"location":"api/","text":"Top-level package for reportly. elements \u00b6 reportly element Figure \u00b6 Source code in reportly/elements.py class Figure : figure_idx = {} # \u9759\u6001\u53d8\u91cf plotly_script = \"\" def __init__ ( self , fig , section_idx = 1 , desc = \"\" , legned_prefix = \"Figure\" ): self . figure_id = str ( uuid . uuid4 ()) self . desc = desc self . section_idx = section_idx self . fig = fig self . legned_prefix = legned_prefix if section_idx not in Figure . figure_idx : Figure . figure_idx [ section_idx ] = 1 Figure . figure_idx [ section_idx ] += 1 def plotly_js_script ( self ): self . plotly_json = self . fig . to_json () script = f \"\"\" <script> data= { self . plotly_json } Plotly.newPlot(' { self . figure_id } ', data['data'], data['layout']); </script> \"\"\" return script def get_legend ( self ): # section_idx = self.section_idx return f \" { self . legned_prefix } { self . section_idx } . { Figure . figure_idx [ self . section_idx ] } { self . desc } \" def plotly_to_html ( self ): \"\"\"plot + figure legend\"\"\" legend = self . get_legend () # html = f\"\"\" # <div class=\"{app_prefix}_figure\"> # <div id='{self.figure_id}'></div> # </div> # \"\"\" html = f \"\"\" <div class=\" { app_prefix } _figure\"> <div class=\"panel panel-default\"> <div class=\"panel-body\"> <div id=' { self . figure_id } '></div> </div> <div class=\"panel-footer { app_prefix } _figure_legend\"><p> { legend } </p></div> </div> { self . plotly_js_script () } </div> \"\"\" return html def image_to_html ( self ): _ , file_ext = self . fig . rsplit ( \".\" , 2 ) if file_ext not in [ \"gif\" , \"png\" , \"jpg\" , \"jpeg\" ]: raise TypeError ( \"fig file must be the one of gif, png, jpg, jpeg\" ) img_data = file2data ( self . fig ) legend = self . get_legend () # legend = f\"\"\"<p class='reportly_figure_legend'><p>{legend}</p></p>\"\"\" # html = f\"\"\" # <div class=\"{app_prefix}_figure\"> # <img src=\"data:image/{file_ext};base64,{img_data}\" class=\"img-fluid\"> # {legend} # </div> # \"\"\" html = f \"\"\" <div class=\" { app_prefix } _figure\"> <div class=\"panel panel-default\"> <div class=\"panel-body\"> <img src=\"data:image/ { file_ext } ;base64, { img_data } \" class=\"img-fluid\"> </div> <div class=\"panel-footer { app_prefix } _figure_legend\"> { legend } </div> </div> </div> \"\"\" return html def to_html ( self ): import plotly if isinstance ( self . fig , plotly . graph_objs . _figure . Figure ): return self . plotly_to_html () elif isinstance ( self . fig , str ) and os . path . exists ( self . fig ): return self . image_to_html () else : raise TypeError ( \"fig must be plotly.graph_objs._figure.Figure or image file\" ) plotly_to_html ( self ) \u00b6 plot + figure legend Source code in reportly/elements.py def plotly_to_html ( self ): \"\"\"plot + figure legend\"\"\" legend = self . get_legend () # html = f\"\"\" # <div class=\"{app_prefix}_figure\"> # <div id='{self.figure_id}'></div> # </div> # \"\"\" html = f \"\"\" <div class=\" { app_prefix } _figure\"> <div class=\"panel panel-default\"> <div class=\"panel-body\"> <div id=' { self . figure_id } '></div> </div> <div class=\"panel-footer { app_prefix } _figure_legend\"><p> { legend } </p></div> </div> { self . plotly_js_script () } </div> \"\"\" return html Table \u00b6 Parameters \u00b6 dataframe : pandas.DataFrame dataframe is the data source int xx Example \u00b6 df = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['a', 'b', 'c']) tab01 = Table(df, section_idx=1, desc='tab01 description', comment='tab01 comment') tab01_html = tab01.to_html() Source code in reportly/elements.py class Table : \"\"\" Parameters ---------- dataframe : pandas.DataFrame dataframe is the data source section_idx: int xx Example -------- df = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['a', 'b', 'c']) tab01 = Table(df, section_idx=1, desc='tab01 description', comment='tab01 comment') tab01_html = tab01.to_html() \"\"\" table_idx = {} # \u9759\u6001\u53d8\u91cf datatable_script = \"\" def __init__ ( self , dataframe , section_idx = 1 , desc = \"\" , comment = \"\" , export_button = True , header_prefix = \"Table\" , classes = [ \"table\" , \"table-bordered\" , \"hover\" ], ** kargs , ): self . table_id = str ( uuid . uuid4 ()) self . table_html = dataframe . to_html ( table_id = self . table_id , classes = classes , ** kargs ) self . table_desc = desc self . export_button = export_button self . table_comment = comment self . header_prefix = header_prefix self . section_idx = section_idx if section_idx not in Table . table_idx : Table . table_idx [ section_idx ] = 1 Table . table_idx [ section_idx ] += 1 Table . datatable_script += self . js_script () def __repr__ ( self ): return self . get_header () def get_header ( self ): # section_idx = self.section_idx return f \" { self . header_prefix } { self . section_idx } . { Table . table_idx [ self . section_idx ] } { self . table_desc } \" def js_script ( self ): table_id = self . table_id if self . export_button : script = ( \"\"\" $('#%s').DataTable( { dom: 'Bfrtip', buttons: [ 'copyHtml5', 'excelHtml5', 'csvHtml5', ] }); \"\"\" % table_id ) else : script = ( \"\"\" $('#%s').DataTable( {}); \"\"\" % table_id ) return script def to_html_custom ( self ): \"\"\"header + table + comment\"\"\" header = self . get_header () table = self . table_html table_comment = self . table_comment if table_comment : table_comment = ( f \"\"\"<p class=' { app_prefix } _table_comment'> { table_comment } </p>\"\"\" ) else : table_comment = \"\" table_html = f \"\"\" <div class=\" { app_prefix } _table\"> <p class='reportly_table_header'> { header } </p> { table } { table_comment } </div> \"\"\" return table_html def to_html_bootstrap ( self ): \"\"\" bootstrap \"\"\" header = self . get_header () table = self . table_html table_comment = self . table_comment if table_comment : table_comment = f \"\"\"<div class=\"panel-footer { app_prefix } _table_comment\"> { table_comment } </div> \"\"\" else : table_comment = \"\" table_html = f \"\"\" <div class=\" { app_prefix } _table\"> <div class=\"panel panel-default\"> <div class=\"panel-heading\"> <p class=' { app_prefix } _table_header panel-title'> { header } </p> </div> <div class=\"panel-body\"> { table } </div> { table_comment } </div> </div> \"\"\" return table_html def to_html ( self ): return self . to_html_bootstrap () def to_datatable_script (): table_jscript = ( \"\"\" <script> function renderTable(){ %s } if (document.readyState === \"complete\") { renderTable() } else { $(document).ready(renderTable); } </script> \"\"\" % Table . datatable_script ) return table_jscript to_html_bootstrap ( self ) \u00b6 bootstrap Source code in reportly/elements.py def to_html_bootstrap ( self ): \"\"\" bootstrap \"\"\" header = self . get_header () table = self . table_html table_comment = self . table_comment if table_comment : table_comment = f \"\"\"<div class=\"panel-footer { app_prefix } _table_comment\"> { table_comment } </div> \"\"\" else : table_comment = \"\" table_html = f \"\"\" <div class=\" { app_prefix } _table\"> <div class=\"panel panel-default\"> <div class=\"panel-heading\"> <p class=' { app_prefix } _table_header panel-title'> { header } </p> </div> <div class=\"panel-body\"> { table } </div> { table_comment } </div> </div> \"\"\" return table_html to_html_custom ( self ) \u00b6 header + table + comment Source code in reportly/elements.py def to_html_custom ( self ): \"\"\"header + table + comment\"\"\" header = self . get_header () table = self . table_html table_comment = self . table_comment if table_comment : table_comment = ( f \"\"\"<p class=' { app_prefix } _table_comment'> { table_comment } </p>\"\"\" ) else : table_comment = \"\" table_html = f \"\"\" <div class=\" { app_prefix } _table\"> <p class='reportly_table_header'> { header } </p> { table } { table_comment } </div> \"\"\" return table_html reportly \u00b6 Main module. utils \u00b6 reportly utils file2data ( filename , b64 = True ) \u00b6 convert the file, especially the image file, to data:image/png;base64 Parameters \u00b6 filename : str The file directory b64 : bool, default=True wheather to deode(\"utf-8\") Returns \u00b6 str : data:image Source code in reportly/utils.py def file2data ( filename , b64 = True ): \"\"\"convert the file, especially the image file, to data:image/png;base64 Parameters ---------- filename : str The file directory b64 : bool, default=True wheather to deode(\"utf-8\") Returns ------- str : data:image \"\"\" if b64 : with io . open ( filename , \"rb\" ) as f : return base64 . b64encode ( f . read ()) . decode ( \"utf-8\" ) else : with io . open ( filename , \"r\" , encoding = \"utf-8\" ) as f : return f . read () include_file ( name , fdir = '/Users/lipidong/dev/reportly/template' , b64 = False ) \u00b6 convert the file, especially the image file, to data:image/png;base64. Mainly used in the jinja template Parameters \u00b6 name : str The file name fdir : str The file directory b64 : bool wheather to deode(\"utf-8\") Returns \u00b6 str : data:image Source code in reportly/utils.py def include_file ( name , fdir = os . path . join ( pathlib . Path ( __file__ ) . parents [ 1 ], \"template\" ), b64 = False ): \"\"\"convert the file, especially the image file, to data:image/png;base64. Mainly used in the jinja template Parameters ---------- name : str The file name fdir : str The file directory b64 : bool wheather to deode(\"utf-8\") Returns ------- str : data:image \"\"\" try : if fdir is None : fdir = \"\" if b64 : with io . open ( os . path . join ( fdir , name ), \"rb\" ) as f : return base64 . b64encode ( f . read ()) . decode ( \"utf-8\" ) else : with io . open ( os . path . join ( fdir , name ), \"r\" , encoding = \"utf-8\" ) as f : return f . read () except ( OSError , IOError ) as e : raise IOError ( \"Could not include file ' {} ': {} \" . format ( name , e ))","title":"modules"},{"location":"api/#reportly.elements","text":"reportly element","title":"elements"},{"location":"api/#reportly.elements.Figure","text":"Source code in reportly/elements.py class Figure : figure_idx = {} # \u9759\u6001\u53d8\u91cf plotly_script = \"\" def __init__ ( self , fig , section_idx = 1 , desc = \"\" , legned_prefix = \"Figure\" ): self . figure_id = str ( uuid . uuid4 ()) self . desc = desc self . section_idx = section_idx self . fig = fig self . legned_prefix = legned_prefix if section_idx not in Figure . figure_idx : Figure . figure_idx [ section_idx ] = 1 Figure . figure_idx [ section_idx ] += 1 def plotly_js_script ( self ): self . plotly_json = self . fig . to_json () script = f \"\"\" <script> data= { self . plotly_json } Plotly.newPlot(' { self . figure_id } ', data['data'], data['layout']); </script> \"\"\" return script def get_legend ( self ): # section_idx = self.section_idx return f \" { self . legned_prefix } { self . section_idx } . { Figure . figure_idx [ self . section_idx ] } { self . desc } \" def plotly_to_html ( self ): \"\"\"plot + figure legend\"\"\" legend = self . get_legend () # html = f\"\"\" # <div class=\"{app_prefix}_figure\"> # <div id='{self.figure_id}'></div> # </div> # \"\"\" html = f \"\"\" <div class=\" { app_prefix } _figure\"> <div class=\"panel panel-default\"> <div class=\"panel-body\"> <div id=' { self . figure_id } '></div> </div> <div class=\"panel-footer { app_prefix } _figure_legend\"><p> { legend } </p></div> </div> { self . plotly_js_script () } </div> \"\"\" return html def image_to_html ( self ): _ , file_ext = self . fig . rsplit ( \".\" , 2 ) if file_ext not in [ \"gif\" , \"png\" , \"jpg\" , \"jpeg\" ]: raise TypeError ( \"fig file must be the one of gif, png, jpg, jpeg\" ) img_data = file2data ( self . fig ) legend = self . get_legend () # legend = f\"\"\"<p class='reportly_figure_legend'><p>{legend}</p></p>\"\"\" # html = f\"\"\" # <div class=\"{app_prefix}_figure\"> # <img src=\"data:image/{file_ext};base64,{img_data}\" class=\"img-fluid\"> # {legend} # </div> # \"\"\" html = f \"\"\" <div class=\" { app_prefix } _figure\"> <div class=\"panel panel-default\"> <div class=\"panel-body\"> <img src=\"data:image/ { file_ext } ;base64, { img_data } \" class=\"img-fluid\"> </div> <div class=\"panel-footer { app_prefix } _figure_legend\"> { legend } </div> </div> </div> \"\"\" return html def to_html ( self ): import plotly if isinstance ( self . fig , plotly . graph_objs . _figure . Figure ): return self . plotly_to_html () elif isinstance ( self . fig , str ) and os . path . exists ( self . fig ): return self . image_to_html () else : raise TypeError ( \"fig must be plotly.graph_objs._figure.Figure or image file\" )","title":"Figure"},{"location":"api/#reportly.elements.Figure.plotly_to_html","text":"plot + figure legend Source code in reportly/elements.py def plotly_to_html ( self ): \"\"\"plot + figure legend\"\"\" legend = self . get_legend () # html = f\"\"\" # <div class=\"{app_prefix}_figure\"> # <div id='{self.figure_id}'></div> # </div> # \"\"\" html = f \"\"\" <div class=\" { app_prefix } _figure\"> <div class=\"panel panel-default\"> <div class=\"panel-body\"> <div id=' { self . figure_id } '></div> </div> <div class=\"panel-footer { app_prefix } _figure_legend\"><p> { legend } </p></div> </div> { self . plotly_js_script () } </div> \"\"\" return html","title":"plotly_to_html()"},{"location":"api/#reportly.elements.Table","text":"","title":"Table"},{"location":"api/#reportly.elements.Table--parameters","text":"dataframe : pandas.DataFrame dataframe is the data source int xx","title":"Parameters"},{"location":"api/#reportly.elements.Table--example","text":"df = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['a', 'b', 'c']) tab01 = Table(df, section_idx=1, desc='tab01 description', comment='tab01 comment') tab01_html = tab01.to_html() Source code in reportly/elements.py class Table : \"\"\" Parameters ---------- dataframe : pandas.DataFrame dataframe is the data source section_idx: int xx Example -------- df = pd.DataFrame(np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), columns=['a', 'b', 'c']) tab01 = Table(df, section_idx=1, desc='tab01 description', comment='tab01 comment') tab01_html = tab01.to_html() \"\"\" table_idx = {} # \u9759\u6001\u53d8\u91cf datatable_script = \"\" def __init__ ( self , dataframe , section_idx = 1 , desc = \"\" , comment = \"\" , export_button = True , header_prefix = \"Table\" , classes = [ \"table\" , \"table-bordered\" , \"hover\" ], ** kargs , ): self . table_id = str ( uuid . uuid4 ()) self . table_html = dataframe . to_html ( table_id = self . table_id , classes = classes , ** kargs ) self . table_desc = desc self . export_button = export_button self . table_comment = comment self . header_prefix = header_prefix self . section_idx = section_idx if section_idx not in Table . table_idx : Table . table_idx [ section_idx ] = 1 Table . table_idx [ section_idx ] += 1 Table . datatable_script += self . js_script () def __repr__ ( self ): return self . get_header () def get_header ( self ): # section_idx = self.section_idx return f \" { self . header_prefix } { self . section_idx } . { Table . table_idx [ self . section_idx ] } { self . table_desc } \" def js_script ( self ): table_id = self . table_id if self . export_button : script = ( \"\"\" $('#%s').DataTable( { dom: 'Bfrtip', buttons: [ 'copyHtml5', 'excelHtml5', 'csvHtml5', ] }); \"\"\" % table_id ) else : script = ( \"\"\" $('#%s').DataTable( {}); \"\"\" % table_id ) return script def to_html_custom ( self ): \"\"\"header + table + comment\"\"\" header = self . get_header () table = self . table_html table_comment = self . table_comment if table_comment : table_comment = ( f \"\"\"<p class=' { app_prefix } _table_comment'> { table_comment } </p>\"\"\" ) else : table_comment = \"\" table_html = f \"\"\" <div class=\" { app_prefix } _table\"> <p class='reportly_table_header'> { header } </p> { table } { table_comment } </div> \"\"\" return table_html def to_html_bootstrap ( self ): \"\"\" bootstrap \"\"\" header = self . get_header () table = self . table_html table_comment = self . table_comment if table_comment : table_comment = f \"\"\"<div class=\"panel-footer { app_prefix } _table_comment\"> { table_comment } </div> \"\"\" else : table_comment = \"\" table_html = f \"\"\" <div class=\" { app_prefix } _table\"> <div class=\"panel panel-default\"> <div class=\"panel-heading\"> <p class=' { app_prefix } _table_header panel-title'> { header } </p> </div> <div class=\"panel-body\"> { table } </div> { table_comment } </div> </div> \"\"\" return table_html def to_html ( self ): return self . to_html_bootstrap () def to_datatable_script (): table_jscript = ( \"\"\" <script> function renderTable(){ %s } if (document.readyState === \"complete\") { renderTable() } else { $(document).ready(renderTable); } </script> \"\"\" % Table . datatable_script ) return table_jscript","title":"Example"},{"location":"api/#reportly.elements.Table.to_html_bootstrap","text":"bootstrap Source code in reportly/elements.py def to_html_bootstrap ( self ): \"\"\" bootstrap \"\"\" header = self . get_header () table = self . table_html table_comment = self . table_comment if table_comment : table_comment = f \"\"\"<div class=\"panel-footer { app_prefix } _table_comment\"> { table_comment } </div> \"\"\" else : table_comment = \"\" table_html = f \"\"\" <div class=\" { app_prefix } _table\"> <div class=\"panel panel-default\"> <div class=\"panel-heading\"> <p class=' { app_prefix } _table_header panel-title'> { header } </p> </div> <div class=\"panel-body\"> { table } </div> { table_comment } </div> </div> \"\"\" return table_html","title":"to_html_bootstrap()"},{"location":"api/#reportly.elements.Table.to_html_custom","text":"header + table + comment Source code in reportly/elements.py def to_html_custom ( self ): \"\"\"header + table + comment\"\"\" header = self . get_header () table = self . table_html table_comment = self . table_comment if table_comment : table_comment = ( f \"\"\"<p class=' { app_prefix } _table_comment'> { table_comment } </p>\"\"\" ) else : table_comment = \"\" table_html = f \"\"\" <div class=\" { app_prefix } _table\"> <p class='reportly_table_header'> { header } </p> { table } { table_comment } </div> \"\"\" return table_html","title":"to_html_custom()"},{"location":"api/#reportly.reportly","text":"Main module.","title":"reportly"},{"location":"api/#reportly.utils","text":"reportly utils","title":"utils"},{"location":"api/#reportly.utils.file2data","text":"convert the file, especially the image file, to data:image/png;base64","title":"file2data()"},{"location":"api/#reportly.utils.file2data--parameters","text":"filename : str The file directory b64 : bool, default=True wheather to deode(\"utf-8\")","title":"Parameters"},{"location":"api/#reportly.utils.file2data--returns","text":"str : data:image Source code in reportly/utils.py def file2data ( filename , b64 = True ): \"\"\"convert the file, especially the image file, to data:image/png;base64 Parameters ---------- filename : str The file directory b64 : bool, default=True wheather to deode(\"utf-8\") Returns ------- str : data:image \"\"\" if b64 : with io . open ( filename , \"rb\" ) as f : return base64 . b64encode ( f . read ()) . decode ( \"utf-8\" ) else : with io . open ( filename , \"r\" , encoding = \"utf-8\" ) as f : return f . read ()","title":"Returns"},{"location":"api/#reportly.utils.include_file","text":"convert the file, especially the image file, to data:image/png;base64. Mainly used in the jinja template","title":"include_file()"},{"location":"api/#reportly.utils.include_file--parameters","text":"name : str The file name fdir : str The file directory b64 : bool wheather to deode(\"utf-8\")","title":"Parameters"},{"location":"api/#reportly.utils.include_file--returns","text":"str : data:image Source code in reportly/utils.py def include_file ( name , fdir = os . path . join ( pathlib . Path ( __file__ ) . parents [ 1 ], \"template\" ), b64 = False ): \"\"\"convert the file, especially the image file, to data:image/png;base64. Mainly used in the jinja template Parameters ---------- name : str The file name fdir : str The file directory b64 : bool wheather to deode(\"utf-8\") Returns ------- str : data:image \"\"\" try : if fdir is None : fdir = \"\" if b64 : with io . open ( os . path . join ( fdir , name ), \"rb\" ) as f : return base64 . b64encode ( f . read ()) . decode ( \"utf-8\" ) else : with io . open ( os . path . join ( fdir , name ), \"r\" , encoding = \"utf-8\" ) as f : return f . read () except ( OSError , IOError ) as e : raise IOError ( \"Could not include file ' {} ': {} \" . format ( name , e ))","title":"Returns"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 pydong lipidong@126.com Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"pydong lipidong@126.com","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/dongspy/reportly/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 reportly could always use more documentation, whether as part of the official reportly docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/dongspy/reportly/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up reportly for local development. Fork the reportly repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/reportly.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/dongspy/reportly/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest tests.test_reportly ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/dongspy/reportly/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"reportly could always use more documentation, whether as part of the official reportly docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/dongspy/reportly/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up reportly for local development. Fork the reportly repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/reportly.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/dongspy/reportly/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_reportly ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Travis will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.1.0 (2022-04-11) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#010-2022-04-11","text":"First release on PyPI.","title":"0.1.0 (2022-04-11)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install reportly, run this command in your terminal: 1 $ pip install reportly This is the preferred method to install reportly, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for reportly can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/dongspy/reportly Or download the tarball : 1 $ curl -OJL https://github.com/dongspy/reportly/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install reportly, run this command in your terminal: 1 $ pip install reportly This is the preferred method to install reportly, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for reportly can be downloaded from the Github repo . You can either clone the public repository: 1 $ git clone git://github.com/dongspy/reportly Or download the tarball : 1 $ curl -OJL https://github.com/dongspy/reportly/tarball/master Once you have a copy of the source, you can install it with: 1 $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use reportly in a project 1 import reportly","title":"usage"},{"location":"usage/#usage","text":"To use reportly in a project 1 import reportly","title":"Usage"}]}